/**
 * GRID
 * A simple flexbox grid implementation, as barebones as possible.
 *
 * Estimated compiled size: 1.7k
 */

:root {
	--col-padding: 1em;
}





/**
 * #GRID ROWS
 * The rows are simply flex containers. They are wrapping so that
 * rows with more than 12 cols don't break.
 */
.row { display: flex; }





/**
 * #GRID COLUMNS
 * The columns are flex items with fixed max-width and flex-basis. 
 * There's also pushes and hides for each breakpoint.
 *
 * There are three breakpoints:
 * 1) 0px    - col-s-n
 * 2) 544px  – col-m-n
 * 3) 768px  – col-l-n
 * 4) 992px  - col-x-n
 * 5) 1200px - col-xx-n
 */
.push-s-0, .push-m-0, .push-l-0, 
.push-x-0, .push-xx-0 { 
	margin-left: 0; 
}

.col-s-hide, .col-m-hide, .col-l-hide, 
.col-x-hide, .col-xx-hide { 
	display: none; 
}


.row > [class^=col-] {
	flex: 0 0 auto;
	padding-left:  var(--col-padding);
	padding-right: var(--col-padding);
}

@for $i from 1 to 12 {
	.col-s-$i {
		flex-basis: calc(100%/(12/$i));
		max-width:  calc(100%/(12/$i));
	}

	.push-s-$i { margin-left: calc(100%/(12/$i)); }
}

@media (min-width: 544px) {
	@for $i from 1 to 12 {
		.col-m-$i {
			flex-basis: calc(100%/(12/$i));
			max-width:  calc(100%/(12/$i));
		}

		.push-m-$i { margin-left: calc(100%/(12/$i)); }
	}	
}

@media (min-width: 768px) {
	@for $i from 1 to 12 {
		.col-l-$i {
			flex-basis: calc(100%/(12/$i));
			max-width:  calc(100%/(12/$i));
		}

		.push-l-$i { margin-left: calc(100%/(12/$i)); }
	}	
}

@media (min-width: 992px) {
	@for $i from 1 to 12 {
		.col-x-$i {
			flex-basis: calc(100%/(12/$i));
			max-width:  calc(100%/(12/$i));
		}

		.push-x-$i { margin-left: calc(100%/(12/$i)); }
	}	
}

@media (min-width: 1200px) {
	@for $i from 1 to 12 {
		.col-xx-$i {
			flex-basis: calc(100%/(12/$i));
			max-width:  calc(100%/(12/$i));
		}

		.push-xx-$i { margin-left: calc(100%/(12/$i)); }
	}	
}
