/* 
 * FLEXBOX GRID
 * The grid is generated using flexbox, and works best if elements
 * are border-sizing: border-box;
 *
 * USAGE
	<div class="row">
		<div class="col-12">Something</div>
	</div>
 *
 */


/*
 * # Row
 * Simple, flexbox rows. Should have as less properties as possible.
 * The supplementary classes are there to facilitate styling the
 * rows later.
 * The default flexbox values are left out on purpose.
 */
.row {
	display: flex;
	flex-wrap: nowrap;
}

// Wrapping
.row--wrap { flex-wrap: wrap; }

// Justification
.row--ju-end     { justify-content: end; }
.row--ju-center  { justify-content: center; }
.row--ju-between { justify-content: space-between; }
.row--ju-around  { justify-content: space-around; }
// .row--ju-start   { justify-content: start; } Default value

// Alignment
.row--al-start    { align-items: flex-start; }
.row--al-end      { align-items: flex-end; }
.row--al-center   { align-items: center; }
.row--al-baseline { align-items: baseline; }
// .row--al-stretch  { align-items: stretch; } default value




/*
 * # Column
 * There are 12 columns and offsets, generated dinamically.
 * There's usage of pseudo classes to remove leading and trailling
 * paddings.
 */
$col-padding: .5rem;
.col {
	flex-grow: 0 0 auto;
	padding: 0 $col-padding;
}

// Remove trailing paddings
.row .col:first-of-type { padding-left: 0; }
.row .col:last-of-type  { padding-right: 0; }

// Generate all col-X classes
$i: 12;
@while $i > 0 {
	$width: 100%/(12/$i);

	.col-#{$i} {
		@extend .col;
		flex-basis: $width;
		max-width: $width;
	}

	.offset-#{$i} {
		margin-left: $width;
	}

	$i: $i - 1;
}